<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.accp.mapper.ClassroomMapper">
  <resultMap id="BaseResultMap" type="com.accp.domain.Classroom">
    <id column="classroomId" jdbcType="INTEGER" property="classroomid" />
    <result column="classroomName" jdbcType="VARCHAR" property="classroomname" />
    <result column="floorId" jdbcType="INTEGER" property="floorid" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="type" jdbcType="INTEGER" property="type" />
    <result column="accommodate" jdbcType="INTEGER" property="accommodate" />
  </resultMap>
  
  <resultMap type="com.accp.domain.Classroom" id="floorclassroom" extends="BaseResultMap">
  	<association property="fobj" column="floorId" javaType="com.accp.domain.Floor">
  		<result column="floorNumber" jdbcType="INTEGER" property="floornumber" />
  	</association>
  </resultMap>
  
  <select id="queryByroom" resultMap="BaseResultMap">
  	select * from classroom where type=1 and status=0 limit 1
  </select>
  <select id="queryByroom1" resultMap="BaseResultMap">
  	select * from classroom where type!=1 and status=0 limit 1
  </select>
  <select id="queryByRoomId" resultMap="BaseResultMap">
  	select * from classroom where classroomId=#{classroomid}
  </select>
  <update id="updateRoom">
  	update classroom set status=1 where classroomId=#{classroomid}
  </update>
  <update id="updateRooms">
  	update classroom set status=0
  </update>
  
  <insert id="classroominsert">
  	INSERT INTO classroom(classroomName,floorId,`status`,`type`,accommodate)VALUES
  	(#{classroomname},#{floorid},0,#{type},35)
  </insert>
  
  <select id="classroominfo" resultMap="floorclassroom">
  	SELECT * FROM classroom r
  	INNER JOIN `floor` f ON r.floorid=f.floorid
  	<where>
  		<if test="floorid">
  			r.`floorid`=#{floorid}
  		</if>
  		<if test="type">
  			AND `type`=#{type}
  		</if>
  		<if test="status">
  			AND `status`=#{status}
  		</if>
  	</where>
  	ORDER BY classroomName
  </select>
  
  <select id="classroomnameEndByfid" resultMap="BaseResultMap">
  	SELECT * FROM classroom WHERE floorId=#{floorid} 
  	ORDER BY classroomId DESC 
  	LIMIT 1
  </select>
  
  <select id="classroomnubByfid" resultType="int">
  SELECT COUNT(*) FROM classroom WHERE floorId=#{floorid}
  </select>
  
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    classroomId, classroomName, floorId, status, type, accommodate
  </sql>
  <select id="selectByExample" parameterType="com.accp.domain.ClassroomExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from classroom
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from classroom
    where classroomId = #{classroomid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from classroom
    where classroomId = #{classroomid,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.accp.domain.ClassroomExample">
    delete from classroom
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.accp.domain.Classroom">
    insert into classroom (classroomId, classroomName, floorId, 
      status, type, accommodate
      )
    values (#{classroomid,jdbcType=INTEGER}, #{classroomname,jdbcType=VARCHAR}, #{floorid,jdbcType=INTEGER}, 
      #{status,jdbcType=INTEGER}, #{type,jdbcType=INTEGER}, #{accommodate,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.accp.domain.Classroom">
    insert into classroom
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="classroomid != null">
        classroomId,
      </if>
      <if test="classroomname != null">
        classroomName,
      </if>
      <if test="floorid != null">
        floorId,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="accommodate != null">
        accommodate,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="classroomid != null">
        #{classroomid,jdbcType=INTEGER},
      </if>
      <if test="classroomname != null">
        #{classroomname,jdbcType=VARCHAR},
      </if>
      <if test="floorid != null">
        #{floorid,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
      <if test="type != null">
        #{type,jdbcType=INTEGER},
      </if>
      <if test="accommodate != null">
        #{accommodate,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.accp.domain.ClassroomExample" resultType="java.lang.Long">
    select count(*) from classroom
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update classroom
    <set>
      <if test="record.classroomid != null">
        classroomId = #{record.classroomid,jdbcType=INTEGER},
      </if>
      <if test="record.classroomname != null">
        classroomName = #{record.classroomname,jdbcType=VARCHAR},
      </if>
      <if test="record.floorid != null">
        floorId = #{record.floorid,jdbcType=INTEGER},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=INTEGER},
      </if>
      <if test="record.type != null">
        type = #{record.type,jdbcType=INTEGER},
      </if>
      <if test="record.accommodate != null">
        accommodate = #{record.accommodate,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update classroom
    set classroomId = #{record.classroomid,jdbcType=INTEGER},
      classroomName = #{record.classroomname,jdbcType=VARCHAR},
      floorId = #{record.floorid,jdbcType=INTEGER},
      status = #{record.status,jdbcType=INTEGER},
      type = #{record.type,jdbcType=INTEGER},
      accommodate = #{record.accommodate,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.accp.domain.Classroom">
    update classroom
    <set>
      <if test="classroomname != null">
        classroomName = #{classroomname,jdbcType=VARCHAR},
      </if>
      <if test="floorid != null">
        floorId = #{floorid,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=INTEGER},
      </if>
      <if test="accommodate != null">
        accommodate = #{accommodate,jdbcType=INTEGER},
      </if>
    </set>
    where classroomId = #{classroomid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.accp.domain.Classroom">
    update classroom
    set classroomName = #{classroomname,jdbcType=VARCHAR},
      floorId = #{floorid,jdbcType=INTEGER},
      status = #{status,jdbcType=INTEGER},
      type = #{type,jdbcType=INTEGER},
      accommodate = #{accommodate,jdbcType=INTEGER}
    where classroomId = #{classroomid,jdbcType=INTEGER}
  </update>

</mapper>