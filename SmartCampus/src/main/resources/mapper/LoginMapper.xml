<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.accp.mapper.LoginMapper">
  <resultMap id="BaseResultMap" type="com.accp.domain.Login">
    <id column="loginId" jdbcType="INTEGER" property="loginId" />
    <result column="loginName" jdbcType="VARCHAR" property="loginName" />
    <result column="pwd" jdbcType="VARCHAR" property="pwd" />
    <result column="roleId" jdbcType="INTEGER" property="roleId" />
    <result column="peopleId" jdbcType="INTEGER" property="peopleId" />
    <result column="type" jdbcType="INTEGER" property="type" />
  </resultMap>
  
  <!-- 查询学员loginId -->
  <select id="queryloginIds" resultType="com.accp.domain.Login">
  	SELECT * FROM `login` WHERE `peopleId`=#{peopleId} AND `type`=#{type}
  </select>
  
  <!-- 修改学生账户密码 -->
  <update id="updatestudentpwd">
  	UPDATE `login` SET `pwd`=#{pwd} WHERE `peopleId`=#{peopleId} AND `type`=#{type}
  </update>
  
  <!-- 修改登录表员工账号的密码 -->
  <update id="updatestaffpwd">
  	UPDATE `login` SET `pwd`=#{pwd},`roleId`=#{roleId} WHERE `peopleId`=#{peopleId} AND `type`=-3
  </update>
  
  <select id="querypeopleId" resultMap="BaseResultMap">
  	SELECT * FROM `login` WHERE `peopleId`=#{peopleId} AND `type`=#{type}
  </select>
  
  <!-- 登录 -->
  <select id="login" resultMap="BaseResultMap">
  	SELECT * FROM `login`
	WHERE `loginName`=#{loginName} AND `pwd`=#{pwd}
  </select>
  
  <!-- 注册 -->
  <insert id="register">
  	INSERT INTO `login`(`loginName`,`pwd`,`roleId`,`peopleId`) 
	VALUE(#{loginName},#{pwd},#{roleId},#{peopleId})
  </insert>
  
  <select id="selectStudentinfo" resultType="com.accp.domain.Login">
  	SELECT * FROM `studentinfo`,`login`,`role`
	WHERE `studentinfo`.`sid`=`login`.`peopleId`
	AND `login`.`roleId`=`role`.`roleId`
	AND `login`.`type`=#{type}
	<if test="sname">
	AND `studentinfo`.`sname` LIKE concat('%',#{sname},'%')
	</if>
  	limit #{start1},#{size1}
  </select>
  
  <select id="selectParents" resultType="com.accp.domain.Login">
  	SELECT * FROM `parents`,`login`,`role`
	WHERE `parents`.`pid`=`login`.`peopleId`
	AND `login`.`roleId`=`role`.`roleId`
	AND `login`.`type`=#{type}
	<if test="pname">
	AND `parents`.`pname` LIKE concat('%',#{pname},'%')
	</if>
	limit #{start2},#{size2}
  </select>
  
  <select id="selectStaff" resultType="com.accp.domain.Login">
  	SELECT * FROM `staff`,`login`,`role`,`post`
	WHERE `staff`.`tid`=`login`.`peopleId`
	AND `login`.`roleId`=`role`.`roleId`
	AND `staff`.`postId`=`post`.`postId`
	AND `login`.`type`=#{type}
	<if test="tname">
	AND `staff`.`tname` LIKE concat('%',#{tname},'%')
	</if>
	limit #{start3},#{size3}
  </select>
  
  <select id="countStudentinfo" resultType="int">
  	select count(1)
  	from studentinfo
  	where 
  	<if test="sname">
			`sname` LIKE concat('%',#{sname},'%')
	</if>
  </select>
  
  <select id="countParents" resultType="int">
  	select count(1)
  	from parents
  	where 
  	<if test="pname">
			`pname` LIKE concat('%',#{pname},'%')
		</if>
  </select>
  
  <select id="countStaff" resultType="int">
  	select count(1)
  	from staff
  	where 
  	<if test="tname">
			`tname` LIKE concat('%',#{tname},'%')
		</if>
  </select>
  
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    loginId, loginName, pwd, roleId, peopleId
  </sql>
  <select id="selectByExample" parameterType="com.accp.domain.LoginExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from login
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from login
    where loginId = #{loginid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from login
    where loginId = #{loginid,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.accp.domain.LoginExample">
    delete from login
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.accp.domain.Login">
    insert into login (loginId, loginName, pwd, 
      roleId, peopleId)
    values (#{loginid,jdbcType=INTEGER}, #{loginname,jdbcType=VARCHAR}, #{pwd,jdbcType=VARCHAR}, 
      #{roleid,jdbcType=VARCHAR}, #{peopleid,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.accp.domain.Login">
    insert into login
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="loginid != null">
        loginId,
      </if>
      <if test="loginname != null">
        loginName,
      </if>
      <if test="pwd != null">
        pwd,
      </if>
      <if test="roleid != null">
        roleId,
      </if>
      <if test="peopleid != null">
        peopleId,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="loginid != null">
        #{loginid,jdbcType=INTEGER},
      </if>
      <if test="loginname != null">
        #{loginname,jdbcType=VARCHAR},
      </if>
      <if test="pwd != null">
        #{pwd,jdbcType=VARCHAR},
      </if>
      <if test="roleid != null">
        #{roleid,jdbcType=VARCHAR},
      </if>
      <if test="peopleid != null">
        #{peopleid,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.accp.domain.LoginExample" resultType="java.lang.Long">
    select count(*) from login
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update login
    <set>
      <if test="record.loginid != null">
        loginId = #{record.loginid,jdbcType=INTEGER},
      </if>
      <if test="record.loginname != null">
        loginName = #{record.loginname,jdbcType=VARCHAR},
      </if>
      <if test="record.pwd != null">
        pwd = #{record.pwd,jdbcType=VARCHAR},
      </if>
      <if test="record.roleid != null">
        roleId = #{record.roleid,jdbcType=VARCHAR},
      </if>
      <if test="record.peopleid != null">
        peopleId = #{record.peopleid,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update login
    set loginId = #{record.loginid,jdbcType=INTEGER},
      loginName = #{record.loginname,jdbcType=VARCHAR},
      pwd = #{record.pwd,jdbcType=VARCHAR},
      roleId = #{record.roleid,jdbcType=VARCHAR},
      peopleId = #{record.peopleid,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.accp.domain.Login">
    update login
    <set>
      <if test="loginname != null">
        loginName = #{loginname,jdbcType=VARCHAR},
      </if>
      <if test="pwd != null">
        pwd = #{pwd,jdbcType=VARCHAR},
      </if>
      <if test="roleid != null">
        roleId = #{roleid,jdbcType=VARCHAR},
      </if>
      <if test="peopleid != null">
        peopleId = #{peopleid,jdbcType=INTEGER},
      </if>
    </set>
    where loginId = #{loginid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.accp.domain.Login">
    update login
    set loginName = #{loginname,jdbcType=VARCHAR},
      pwd = #{pwd,jdbcType=VARCHAR},
      roleId = #{roleid,jdbcType=VARCHAR},
      peopleId = #{peopleid,jdbcType=INTEGER}
    where loginId = #{loginid,jdbcType=INTEGER}
  </update>
</mapper>